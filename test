node{
    stage('clone'){
        checkout([$class: 'GitSCM', branches: [[name: "*/master"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '', url: "https://github.com/lohitj/spring-boot-mongodb-example.git"]]])
    }
    stage('create') {
      
        script {
            
            openshift.withCluster() {
                openshift.withProject(){
                    def f = openshift.selector('pods').names()
                    def t
                    for(int i=0;i<f.size();i++)
                    {
                        if(f[i].split('/')[1].matches(/mongo(.*)/))
                        {
                            println 'lohit'
                            t = f[i].split('/')[1]
                        }
                    }
                    println ""
                    openshift.rsync("\"${workspace}\" "+t+":/opt/app-root/src")
                    def g = openshift.exec(t+" -c mongodb -- bash -c \"mongo < workspace/*.js\"")
                   println g
                   def n = openshift.exec(t+" -c mongodb -- bash -c \"mongo < workspace/*.js\"").status
                  if(n!=0)
                  {
                      currentBuild.result = 'FAILURE'
                  }
                  println f 
                  println n
                  
                }
            }
        }
      }
    
}
###just testing###
